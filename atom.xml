<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Raw Bits]]></title>
  <link href="http://hudl.github.com/atom.xml" rel="self"/>
  <link href="http://hudl.github.com/"/>
  <updated>2012-10-18T15:10:48-05:00</updated>
  <id>http://hudl.github.com/</id>
  <author>
    <name><![CDATA[Hudl]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Preparing for Season: Load Testing]]></title>
    <link href="http://hudl.github.com/blog/2012/10/05/load-testing/"/>
    <updated>2012-10-05T00:00:00-05:00</updated>
    <id>http://hudl.github.com/blog/2012/10/05/load-testing</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Hudl is fundamentally a technology company, and our area of focus is sports. Since our namesake application is web-based, and most of our partners are football coaches, that presents us with an interesting situation: our usage changes dramatically with the time of the year (and of the week, for that matter). In some ways, that&#8217;s good. The offseason gives us an opportunity to catch our breath, tackle bigger features, and concentrate on adding more value to our product.</p>

<p>However, since our public launch in 2009, we&#8217;ve expanded our user base significantly each year, and we don&#8217;t really feel that full impact until the last couple weeks of August when football programs move into full swing. Most other web applications grow at a steady pace, so scaling is something they deal with regularly. They&#8217;ll likely add some more hardware, optimize their application code, tweak settings, and repeat frequently. Because their site load does not generally recede for longer than a day or so, this strategy will work well.</p>

<p>Hudl&#8217;s usage is not nearly so regular. Not only is it strongly seasonal, each season brings significantly more users than our application has ever seen before. So how do we prepare? We rely on simulation during the offseason. We work hard to predict our fall numbers and emulate our upcoming usage in order to find bottlenecks and weak links before the real season starts. Simulation is never as good as the real thing, but just like the teams who depend on us, we rely on our preparation to take us successfully through the season.</p>

<h2>Analyzing Current Usage</h2>

<p>Before we can simulate our users&#8217; behavior, we have to understand what it is they do. For this, we draw from two main sources of information. The primary is our usage logs. We do extensive logging throughout our application code, and all that data winds up in <a href="http://splunk.com">Splunk</a> where we can search and analyze it. We also use Google Analytics to tell us where users spend most of their time on our site. We look for the HTTP endpoints and services that are most heavily used during our previous season, then factor in recent trends because we&#8217;ve added several new features since December. From here, we&#8217;ll pick off the most used web requests to emulate. Typically, we draw a line at about 1% or more of the total requests, but it&#8217;s not an absolute rule because we know from experience that certain services are likely to be costly even if they are not used frequently.</p>

<p>As with all simulation, there are some inaccuracies. Our usage data is good, but it isn&#8217;t perfect. Even if it were, we wouldn&#8217;t be able to emulate the usage perfectly, and we leave many of the lesser-used features untested due to resource constraints. And, as I mentioned before, we&#8217;re relying on numbers from the prior season which is likely to differ from this season&#8217;s numbers because of new designs and features. We have ways to mitigate these risks, but that&#8217;s another topic.</p>

<h2>Tools</h2>

<p>Our load testing suite is built on Microsoft&#8217;s Visual Studio Ultimate load testing framework. Running on a .NET stack, we&#8217;re already heavily invested in Microsoft&#8217;s development tools, so it was a natural choice. The starting point for these load tests is recording web tests.</p>

<p><img src="http://static.hudl.com/cms/img/rawbits/vs_webtest.png" title="Visual Studio .webtest screenshot" alt="Visual Studio .webtest screenshot" /></p>

<p>Web tests can make any kind of HTTP request, and the recorder will automatically set appropriate headers for HTML, JSON and SOAP requests. We intentionally keep the .webtest files instead of converting them into C# code because they can be maintained through the GUI, which makes them more accessible for maintenance by even those not intimately acquainted with the suite. To keep the tests in that format required some significant infrastructure in code, though. The framework is delightfully modularized so we can build plugins at all levels of the test to capture, extract, and/or inject data.</p>

<div><script src='https://gist.github.com/3841524.js?file=ExtractPublishedClipId.cs'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Xml.Linq;
using Microsoft.VisualStudio.TestTools.WebTesting;

namespace Hudl.WebApp.Tests.TestsCore.ExtractionRules
{
    [DisplayName(&quot;Extract Published Clip ID&quot;)]
    [Description(&quot;For a CreateClip web service request, extracts the newly-created Clip ID value and inserts it into the ID collection specified by the Context parameter name.&quot;)]
    public class ExtractPublishedClipId : ExtractionRule
    {
        private static readonly XNamespace DefaultNamespace;

        static ExtractPublishedClipId()
        {
            DefaultNamespace = &quot;http://tempuri.org/&quot;;
        }

        public override void Extract(object sender, ExtractionEventArgs e)
        {
            var bodyString = e.Response.BodyString;
            var clipId = GetClipId(bodyString);

            if (!clipId.HasValue)
            {
                e.Message = &quot;Extraction of Published Clip ID failed. Result text: &quot; + Environment.NewLine +
                            e.Response.BodyString;
                e.Success = false;
                return;
            }

            var clipIds = e.WebTest.Context[ContextParameterName] as ICollection&lt;long&gt;;
            clipIds.Add(clipId.Value);

            e.Success = true;
        }

        private static long? GetClipId(string bodyString)
        {
            var bodyDoc = XDocument.Parse(bodyString);
            var resultElement = bodyDoc.Descendants(DefaultNamespace + &quot;CreateClipResult&quot;).SingleOrDefault();

            if (resultElement == null)
            {
                return null;
            }

            var createClipResultValue = resultElement.Value;
            var clipId = Convert.ToInt64(createClipResultValue);
            return clipId;
        }
    }
}</code></pre></noscript></div>


<p>The most important part of our web tests is the seed data. We need it to be as accurate as possible, so we harvest real user data, denormalize it, and insert it into a seed database. We created a tool to do this, of course, and it currently takes about six hours to create this database. Fortunately, we don&#8217;t need to do it very often as the data is not changed during testing.</p>

<p>Feeding the data into the tests is tricky because the DataSources the framework provides cannot take criteria. When you&#8217;re emulating a user on Hudl, the data has to be specific to that user or the test is pointless. We leveraged the WebTestPlugin class to create our own datasources that query the seed database for a related set of data and cache it for use during subsequent iterations. It is also lazy loaded. This keeps the memory footprint on the test agents as low as we can keep it, and eases the strain on the seed database (which is located centrally on the load test controller).</p>

<div><script src='https://gist.github.com/3841573.js?file=AnnotationsDataSource.cs'></script>
<noscript><pre><code>using System;
using System.Data;
using System.Data.SqlClient;

namespace Hudl.WebApp.Tests.TestsCore.DataSources
{
    public class AnnotationsDataSource : ModifiableQueueBasedDataSource&lt;long&gt;
    {
        private readonly long _userId;

        public AnnotationsDataSource(long userId)
        {
            _userId = userId;
            HasBeenModified = false;
        }

        protected override void LoadItems()
        {
            const string annotationDataQuery = @&quot;SELECT [AnnotationId]
                                                 FROM [AnnotationData] 
                                                 WHERE [UserId] = @UserId&quot;;
            var sqlCommand = new SqlCommand(annotationDataQuery);
            sqlCommand.Parameters.Add(&quot;@UserId&quot;, SqlDbType.BigInt).Value = _userId;

            UsingDataReader(sqlCommand, EnqueueAnnotationData);
        }

        private void EnqueueAnnotationData(SqlDataReader sqlDataReader)
        {
            var annotationId = Convert.ToInt64(sqlDataReader[&quot;AnnotationId&quot;]);

            DataItems.Enqueue(annotationId);
        }

        public override string ToString()
        {
            var value = String.Format(&quot;AnnotationsDataSource: Is loaded: {0}, {1} items, User {2}, Has been modified: {3}&quot;, IsLoaded, DataItems.Count, _userId, HasBeenModified);
            return value;
        }
    }
}</code></pre></noscript></div>




<div><script src='https://gist.github.com/3841578.js?file=AnnotationsDataSourcePlugin.cs'></script>
<noscript><pre><code>using System.ComponentModel;
using Hudl.WebApp.Tests.TestsCore.DataSources;
using Microsoft.VisualStudio.TestTools.WebTesting;

namespace Hudl.WebApp.Tests.TestsCore.Plugins
{
    [DisplayName(&quot;Annotations DataSource&quot;)]
    [Description(&quot;Reads Annotation IDs from the context and assigns values to context parameters.&quot;)]
    public class AnnotationsDataSourcePlugin : WebTestPlugin
    {
        [DisplayName(&quot;DataSource Context Parameter Name&quot;)]
        [Description(&quot;The name of the context parameter which holds the DataSource object.&quot;)]
        [DefaultValue(&quot;AnnotationsDataSource&quot;)]
        public string DataSourceContextParameterName { get; set; }

        [DisplayName(&quot;AnnotationId Context Parameter Name&quot;)]
        [Description(&quot;The name of the context parameter which will be assigned the annotation ID value.&quot;)]
        [DefaultValue(&quot;AnnotationId&quot;)]
        public string AnnotationIdContextParameterName { get; set; }

        public override void PreWebTest(object sender, PreWebTestEventArgs e)
        {
            base.PreWebTest(sender, e);
            var webTextContext = e.WebTest.Context;

            var annotationsDataSource = webTextContext[DataSourceContextParameterName] as IDataSource&lt;long&gt;;

            var annotationId = annotationsDataSource.GetNext();
            webTextContext[AnnotationIdContextParameterName] = annotationId;
        }
    }
}</code></pre></noscript></div>


<h2>Running in the Cloud</h2>

<p>As you might expect, because Hudl runs on EC2, we also test on and against EC2. We spin up an exact replica of our production environment and enough instances to simulate the number of simultaneous users we want to test. Microsoft recommends each load test agent only run 1000 concurrent users, and we generally stick to that. We need to add one more server to be the controller for the test agents. The controller coordinates the tests, feeds the agents seed data, and collects and aggregates result data. We often run these tests for hours at a time so we can examine the site behavior during and after long periods of stress. When we&#8217;re through, we can terminate these instances so we only spend money when we&#8217;re actively testing.</p>

<h2>Wrapping Up</h2>

<p>While the tests are running, we watch site performance and server metrics. Finding and addressing these bottlenecks is a post in itself, but we&#8217;re especially interested in seeing how our databases perform, where the expensive operations are and if they can be remedied, and how the system reacts when we kill servers. Once the tests have completed, we can critique performance: How many errors did we see, and are they legitimate? Why did these requests take so long? What can we do to improve our average page speed?</p>

<p>The answers to these questions will determine the success of our season and the success of many of our partners&#8217; seasons.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UI Prototyping at Hudl]]></title>
    <link href="http://hudl.github.com/blog/2012/06/01/ui-prototyping-at-hudl/"/>
    <updated>2012-06-01T10:30:00-05:00</updated>
    <id>http://hudl.github.com/blog/2012/06/01/ui-prototyping-at-hudl</id>
    <content type="html"><![CDATA[<p>At Hudl, we believe that you should design and prototype your app&#8217;s user interface before you invest heavily anywhere else. <strong>The UI is your whole product</strong> in your users&#8217; eyes. It has to be great.</p>

<p>When we work on a new product or feature, we try to figure out the fastest way to build an interface to answer one question about our approach to the interface: &#8220;Are we on the right track?&#8221;</p>

<p>A lot of our ideas come from <a href="http://www.amazon.com/Sketching-User-Experiences-Interactive-Technologies/dp/0123740371">Bill Buxton&#8217;s great book about UX</a>&#8211;particularly as it relates to protoyping an experience. Bill says that your early sketches and prototypes should never be treated as <em>answers</em> to the problem.</p>

<p>Instead, teams should think of them as <em>questions</em> <strong>about</strong> the problem.</p>

<blockquote><p>Does this flow make sense? Are these steps in the right order? Can we make assumption X and skip this altogether? Should this object be bigger or smaller? Is the transition from A to B smooth or jarring?</p></blockquote>

<p>You can&#8217;t answer these questions by <em>talking about</em> a UI. You have to see it and tinker with it. Better yet, <strong>your users need to use it.</strong></p>

<p>There are all kinds of ways you can prototype and get this kind of feedback from both your internal team and external users. Many of them don&#8217;t include writing UI code. Here are a couple of ways our designers and developers &#8220;fake it before we make it.&#8221;</p>

<h2>Sketched Workflows on Notable</h2>

<p>Sketches usually don&#8217;t qualify as a true prototype unless you tie them together somehow.</p>

<p>We upload photos of sketches from our phones to <a href="http://notableapp.com">Notable</a>. Once there, we organize them into ordered sets and groups to illustrate a workflow.</p>

<p><img src="http://hudl-content.s3.amazonaws.com/cms/img/rawbits/notable-sequence.png" alt="Notable Sequence" /></p>

<p>The app is great because collaborators can comment inline on the sketch. Replies to those comments are threaded so everything stays logically organized. Unlike an email or Basecamp thread, you avoid having to repeatedly refer to a specific location on a particular sketch.</p>

<p>It&#8217;s an async virtual whiteboard session for our product team. You can also share out public URLs to gather feedback from users.</p>

<h2>Screen Recording on a &#8220;Dumb&#8221; UI</h2>

<p>Even if your app can&#8217;t <em>do anything yet</em>. You can communicate the intent with a a screen recording and bit of video editing in a tool of your choice.</p>

<p>This approach works with static mockups as well as stubbed UI code.</p>

<iframe src="http://player.vimeo.com/video/43261719?portrait=0" width="500" height="375" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Again, the whole idea is to <em>fake</em> the experience of whatever you&#8217;re building so that others on your team can put themselves in the user&#8217;s shoes. You can also show your customers the video directly and ask: &#8220;Are we on the right track?&#8221; If they aren&#8217;t <strong>visibly or audibly excited</strong> by it, you&#8217;re off the mark. When you solve a real problem, people get emotional. Prototypes are real enough that they draw emotion out. Your team has to read that and react in future iterations.</p>

<iframe src="http://player.vimeo.com/video/43265446?portrait=0" width="500" height="394" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>The voiceover helps provide emphasis on particularly important interactions. It can also remind stakeholders of the areas &#8220;we&#8217;ll figure out later&#8221; so you can keep feedback moving down the path you want.</p>

<h2>HTML + CSS + jQuery UI &amp; Templates + Dropbox</h2>

<p>Our favorite kind of prototype is one that&#8217;s closest to the real thing without being too cumbersome, slow or expensive. If you&#8217;re fast with hand-coding HTML and CSS, there are tons of JavaScript libraries out there that&#8217;ll help bring your app to life.</p>

<p>Then you can put the project folder on Dropbox, send a link out to co-workers or users, and let them click through your design in their own browser.</p>

<p>Here&#8217;s a prototype of a fluid-width, card-style interface for our recent recruiting product:
<a href="http://dl.dropbox.com/u/8878990/Prototype/boards_combined/index.html">Try the live prototype here.</a></p>

<p>We were exploring the idea of using lots of drag, drop and hover states using the cards&#8211;stuff that&#8217;s really hard to capture in a static mock.</p>

<p><img src="http://hudl-content.s3.amazonaws.com/cms/img/rawbits/hudl-recruit-prototype.png" alt="Hudl Recruit Prototype" /></p>

<p>Sometimes it&#8217;s a pain to get <em>realistic</em> dummy data for your designs. It&#8217;s a sin in the web design world to use &#8220;Lorem ipsum&#8221; for all your copy. In the application world, it&#8217;s just as bad to use <em>Person 1</em>, <em>Person 2</em>, etc., for a list of people. If you&#8217;re treating content as filler you&#8217;re ignoring the purpose of the app from the user&#8217;s perspective! A real user cares a lot about those names.</p>

<p>jQuery templates and a little JSON data structure make this easy:</p>

<div><script src='https://gist.github.com/3842460.js?file='></script>
<noscript><pre><code>&lt;script id=&quot;cardTemplate&quot; type=&quot;text/x-jquery-tmpl&quot;&gt;
    &lt;div class=&quot;card&quot;&gt;
        &lt;div class=&quot;card_header&quot;&gt;
            &lt;h3&gt;
                &lt;small&gt;${FirstName}&lt;/small&gt;
                &lt;strong&gt;${LastName}&lt;/strong&gt;
            &lt;/h3&gt;
            &lt;span class=&quot;meta&quot;&gt;
                {{if Thumbs}} &lt;span title=&quot;Watch ${FirstName}&amp;rsquo;s Rated Clips&quot; class=&quot;thumbs&quot;&gt;${Thumbs}&lt;/span&gt; {{/if}}
                &lt;span class=&quot;grad&quot;&gt;${Grad}&lt;/span&gt;
            &lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=&quot;card_content&quot;&gt;
            &lt;img src=&quot;${ImageUri}&quot; alt=&quot;&quot;/&gt;
        &lt;/div&gt;
        &lt;div class=&quot;card_footer&quot;&gt;
            &lt;div class=&quot;card_footer_inner&quot;&gt;
            &lt;h4&gt;&lt;strong&gt;${Position}&lt;/strong&gt; &amp;middot; ${Height} ${Weight}&lt;/h4&gt;
            &lt;p&gt;${State} &amp;middot; ${School}&lt;/p&gt;
            &lt;/div&gt;
            &lt;div class=&quot;card_actions&quot;&gt;
                &lt;a href=&quot;#&quot; class=&quot;send&quot;&gt;Send To&amp;hellip;&lt;/a&gt;
                &lt;a href=&quot;#&quot; class=&quot;reject&quot;&gt;Reject for Now&lt;/a&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;card_state&quot;&gt;
            &lt;p&gt;Rejected for now. &lt;a href=&quot;#&quot; class=&quot;undo&quot;&gt;Undo&lt;/a&gt;&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/script&gt;</code></pre></noscript></div>


<p>That&#8217;s an individual &#8220;card&#8221; object in the UI. We instantiate a bunch of them in a JavaScript loop before the page loads and cycle the data into each with a hand-written bit&#8217;o JSON:</p>

<div><script src='https://gist.github.com/2854058.js?file='></script>
<noscript><pre><code>// a little array is all you need

var players = [
    { FirstName: &quot;John&quot;, LastName: &quot;Smithers&quot;, School: &quot;Plano Heights&quot;, State: &quot;TX&quot;, ImageUri: &quot;http://dl.dropbox.com/u/8878990/Prototype/boards_combined/img/face.jpg&quot;, Position: &quot;QB&quot;, Jersey: &quot;23&quot;, Height: &quot;6'3''&quot;, Weight: &quot;225 lbs&quot;, Grad: &quot;2013&quot;, Thumbs: &quot;6&quot;},
    { FirstName: &quot;Kyle&quot;, LastName: &quot;Karthauser&quot;, School: &quot;Plano Heights&quot;, State: &quot;TX&quot;, ImageUri: &quot;http://dl.dropbox.com/u/8878990/Prototype/boards_combined/img/unknownUser148.png&quot;, Position: &quot;K&quot;, Jersey: &quot;23&quot;, Height: &quot;6'3''&quot;, Weight: &quot;225 lbs&quot;, Grad: &quot;2013&quot;},
    { FirstName: &quot;Albert&quot;, LastName: &quot;Anderson&quot;, School: &quot;Southlake Carroll&quot;, State: &quot;AL&quot;, ImageUri: &quot;http://dl.dropbox.com/u/8878990/Prototype/boards_combined/img/face2.jpg&quot;, Position: &quot;WR&quot;, Jersey: &quot;23&quot;, Height: &quot;6'3''&quot;, Weight: &quot;225 lbs&quot;, Grad: &quot;2013&quot;, Thumbs: &quot;6&quot;},
    { FirstName: &quot;Bobby&quot;, LastName: &quot;Bingham&quot;, School: &quot;Plano Heights&quot;, State: &quot;TX&quot;, ImageUri: &quot;http://dl.dropbox.com/u/8878990/Prototype/boards_combined/img/face3.jpg&quot;, Position: &quot;RB&quot;, Jersey: &quot;23&quot;, Height: &quot;6'3''&quot;, Weight: &quot;205&quot;, Grad: &quot;2013&quot;, Thumbs: &quot;11&quot;},
    { FirstName: &quot;Carl&quot;, LastName: &quot;Contre&quot;, School: &quot;Plano Heights&quot;, State: &quot;TX&quot;, ImageUri: &quot;http://dl.dropbox.com/u/8878990/Prototype/boards_combined/img/face4.jpg&quot;, Position: &quot;SS&quot;, Jersey: &quot;23&quot;, Height: &quot;6'3''&quot;, Weight: &quot;225 lbs&quot;, Grad: &quot;2013&quot;, Thumbs: &quot;6&quot;},
    { FirstName: &quot;Harry&quot;, LastName: &quot;Henderson&quot;, School: &quot;Bishop Gorman&quot;, State: &quot;TX&quot;, ImageUri: &quot;http://dl.dropbox.com/u/8878990/Prototype/boards_combined/img/unknownUser148.png&quot;, Position: &quot;T&quot;, Jersey: &quot;23&quot;, Height: &quot;6'3''&quot;, Weight: &quot;205&quot;, Grad: &quot;2013&quot;, Thumbs: &quot;6&quot;},
    { FirstName: &quot;David&quot;, LastName: &quot;Duane&quot;, School: &quot;Bishop Gorman&quot;, State: &quot;TX&quot;, ImageUri: &quot;http://dl.dropbox.com/u/8878990/Prototype/boards_combined/img/face5.jpg&quot;, Position: &quot;LB&quot;, Jersey: &quot;23&quot;, Height: &quot;6'3''&quot;, Weight: &quot;225 lbs&quot;, Grad: &quot;2013&quot;},
    { FirstName: &quot;Edward&quot;, LastName: &quot;Edgerton&quot;, School: &quot;Plano Heights&quot;, State: &quot;TX&quot;, ImageUri: &quot;http://dl.dropbox.com/u/8878990/Prototype/boards_combined/img/face6.jpg&quot;, Position: &quot;G&quot;, Jersey: &quot;23&quot;, Height: &quot;6'3''&quot;, Weight: &quot;225 lbs&quot;, Grad: &quot;2013&quot;}
];</code></pre></noscript></div>


<p>Using a <em>little bit</em> of code as a designer is necessary. This method is quick and dirty&#8211;much of it isn&#8217;t in the production version of this app. But using more realistic data lets you and potential users get a feel for how this thing might behave in the real world.</p>

<h2>Paper Prototype</h2>

<p>We love to sketch. The engineer in us also also loves to create reusable components. That&#8217;s why making a prototype with paper and sharpie is a wonderful exercise.</p>

<p>Instead of repeatedly drawing the same &#8220;shell&#8221; for your screens over and over again, you can sketch small pieces of your UI, cut them out, and compose them to communicate an interaction.</p>

<p>In this demo, you&#8217;ll see different states shown by adding and removing pieces of paper on the canvas.</p>

<iframe src="http://player.vimeo.com/video/11924309?portrait=0" width="500" height="375" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>The lesson we learned from this exercise is that no one likes 18 minute videos. If you&#8217;re doing asynchronous design communication, <strong>you have to keep things short</strong>. The solution needs to have an emotional impact right out of the gate.</p>

<h2>Conclusion</h2>

<p>We&#8217;ve shown you a couple different ways we&#8217;ve prototyped interfaces at Hudl. We don&#8217;t do it the same way every time but we always make them with the same idea in mind.</p>

<blockquote><p>What&#8217;s the fastest way to build something that answers questions we have or tests assumptions we&#8217;ve made about our users and their workflow?</p></blockquote>

<p>The code quality, technology, and tools don&#8217;t matter at all compared to that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making NSArray More Functional]]></title>
    <link href="http://hudl.github.com/blog/2012/04/03/making-nsarray-more-functional/"/>
    <updated>2012-04-03T13:24:00-05:00</updated>
    <id>http://hudl.github.com/blog/2012/04/03/making-nsarray-more-functional</id>
    <content type="html"><![CDATA[<p>Having spent a lot of time developing in C#, Ruby, and Javascript, I&#8217;ve had the pleasure of using frameworks like Linq, ActiveRecord, and Underscore.js. Each one has it&#8217;s own set of similar functional methods that make working with collections a lot more fun. Objective-C on the other hand has beauties like</p>

<div><script src='https://gist.github.com/2295259.js?file=existing.h'></script>
<noscript><pre><code>- (void)enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop)block;
- (NSUInteger)indexOfObjectPassingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate;</code></pre></noscript></div>


<p>and is missing pretty much everything else.</p>

<p>Rather than haphazardly cram together a bunch of built-in <code>NSArray</code> methods every time we wanted to manipulate an array, we wrote our own methods. Some of them may be fairly naive implementations, but they get the job done and the names are so much easier to remember.</p>

<p>The good news is Objective-C supports Categories, so adding the methods to <code>NSArray</code> was a breeze. Checkout the <a href="https://github.com/hudl/NSArray-FunctionalHelper">Github repository</a> to see all the methods and add more of your own.</p>

<h2>Examples</h2>

<div><script src='https://gist.github.com/2295259.js?file=examples.m'></script>
<noscript><pre><code>// A new array that only contains valid objects
NSArray *validObjects = [allObjects where:^(id obj) { return [obj isValid]; }];

// A new array with the first five valid objects
NSArray *firstFive = [validObjects take:5];

// A new array with valid objects 6-10
NSArray *nextFive = [[validObjects skip:5] take:5];

// A new array containing only the objectIDs of each valid object
NSArray *objectIds = [validObjects map:^(id obj) { return [obj objectID]; }];

// A dictionary that has objectIDs for keys and the original objects as values
NSDictionary *objectIdsToObjects = [validObjects toDictionary:^(id obj) { return [obj objectID]; }];</code></pre></noscript></div>

]]></content>
  </entry>
  
</feed>
